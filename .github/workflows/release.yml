name: Release

permissions:
  contents: write

env:
  SBOM_NAME: "${{ github.event.repository.name }}-sbom.spdx.json"
  GPG_FINGERPRINT: B3596D99AED95A4831F8E9A1092017BA1C395379

on:
  workflow_run:
    workflows: ["Tag"]
    types:
      - completed
    branches:
      - main

jobs:
  release:
    permissions:
      actions: read
      contents: write
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Get Tag Name
        id: get_tag
        run: |
          # Get the workflow run that created the tag
          RUN_ID=${{ github.event.workflow_run.id }}
          # Get the tag name from the workflow run's jobs
          TAG_NAME=$(curl -s -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/$RUN_ID/jobs" | \
            jq -r '.jobs[] | select(.name | contains("Create Tag")) | .outputs.tag_name')
          echo "Tag name: $TAG_NAME"
          if [ -z "$TAG_NAME" ]; then
            echo "Error: Tag name is empty!"
            exit 1
          fi
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ env.TAG_NAME }}

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_SECRET }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Run GoReleaser
        id: goreleaser
        uses: goreleaser/goreleaser-action@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT_OLD: ${{ env.GPG_FINGERPRINT }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
        with:
          args: release --skip=docker,homebrew --rm-dist

      - name: Generate SPDX SBOM
        uses: anchore/sbom-action@v0
        with:
          path: "./dist"
          output-file: ${{ env.SBOM_NAME }}
          format: "spdx"

      - name: Scan SBOM
        uses: anchore/scan-action@v6
        with:
          sbom: ${{ env.SBOM_NAME }}

      - name: Upload SBOM to Release
        run: gh release upload ${{ env.TAG_NAME }} ${{ env.SBOM_NAME }} --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}